name: CI/CD with terraform
on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
  TF_STATE_BUCKET_NAME: ${{ secrets.TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  VPC_ID: ${{ secrets.VPC_ID }}
  SUBNET_ID: ${{ secrets.SUBNET_ID }}
  AWS_REGION: us-west-2

jobs:
  deploy-infra:
    runs-on: ubuntu-latest
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terrform_wrapper: false
      - name: Terraform Init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-west-2"
        working-directory: ./terraform
      - name: Terraform Plan
        id: plan
        run: |-
          terraform plan \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -var="vpc_id=$VPC_ID" \
          -var="subnet_id=$SUBNET_ID" \
          -out=PLAN
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply PLAN
        working-directory: ./terraform
      - name: Set output
        id: set-ip
        run: |-
          echo "::set-output nme=instance_public_ip::$(terraform output instance_public_ip)"
  deploy-app:
    runs-on: ubuntu-latest
    needs: deploy-infra
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: set IP env var
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Login to ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Docker build
        env:
          REPOSITORY: node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-west-2
        run: |-
          docker build -t $REPOSITORY:$IMAGE_TAG .
          docker push $REPOSITORY:$IMAGE_TAG
        working-directory: ./nodeapp
      - name: Deploy image to ecr
        env: 
          REPOSITORY: node-app
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-west-2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP}}
          username: ubuntu
          key: ${{ env.PRIVATE_SSH_KEY }}
          envs: PRIVATE_SSH_KEY,REPOSITORY,IMAGE_TAG,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_SESSION_TOKEN,AWS_DEFAULT_REGION,AWS_REGION
          script: |-
            sudo apt update
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REPOSITORY:$IMAGE_TAG
            sudo docker run -d --name myappcontainer -p 80:8080 $REPOSITORY:$IMAGE_TAG